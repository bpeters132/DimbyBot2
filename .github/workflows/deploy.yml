name: CI/CD

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      skip_build:
        description: 'Skip building images (use existing ones)'
        required: true
        default: false
        type: boolean
      invalidate_caches:
        description: 'Invalidate dependency caches (skip cache restore)'
        required: false
        default: false
        type: boolean
      enable_docker_cache:
        description: 'Enable Docker layer caching'
        required: false
        default: true
        type: boolean
      cache_scope_mode:
        description: 'Docker cache scope mode'
        required: false
        default: 'shared'
        type: choice
        options:
          - shared
          - branch
          - environment
      deploy_environment:
        description: 'Deployment environment name (used for environment cache scope)'
        required: false
        default: ''
        type: string

jobs:
  build-and-push:
    if: ${{ github.event_name != 'workflow_dispatch' || !inputs.skip_build }}
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      IMAGE_BOT: ghcr.io/${{ github.repository_owner }}/dimbybot2/bot:latest
      IMAGE_LAVALINK: ghcr.io/${{ github.repository_owner }}/dimbybot2/lavalink:latest
      BOT_CACHE_SCOPE: ${{ inputs.cache_scope_mode == 'shared' && 'dimbybot2-bot' || inputs.cache_scope_mode == 'branch' && format('{0}-bot', github.ref_name) || inputs.cache_scope_mode == 'environment' && (inputs.deploy_environment != '' && format('{0}-bot', inputs.deploy_environment) || 'dimbybot2-bot') }}
      LAVALINK_CACHE_SCOPE: ${{ inputs.cache_scope_mode == 'shared' && 'dimbybot2-lavalink' || inputs.cache_scope_mode == 'branch' && format('{0}-lavalink', github.ref_name) || inputs.cache_scope_mode == 'environment' && (inputs.deploy_environment != '' && format('{0}-lavalink', inputs.deploy_environment) || 'dimbybot2-lavalink') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        id: setup-node
        if: ${{ !inputs.invalidate_caches }}
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'yarn'
          cache-dependency-path: 'yarn.lock'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Cache telemetry
        run: |
          echo "## Dependency Cache Status" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.setup-node.outputs.cache-hit }}" == "true" ]; then
            echo "✅ Yarn cache hit" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Yarn cache miss" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push bot image
        id: build-bot
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE_BOT }},ghcr.io/${{ github.repository_owner }}/dimbybot2/bot:sha-${{ github.sha }}
          cache-from: ${{ inputs.enable_docker_cache && !inputs.invalidate_caches && format('type=gha,scope={0}', env.BOT_CACHE_SCOPE) || format('type=registry,ref={0}', env.IMAGE_BOT) }}
          cache-to: ${{ inputs.enable_docker_cache && !inputs.invalidate_caches && format('type=gha,scope={0},mode=max', env.BOT_CACHE_SCOPE) || '' }}
          build-args: |
            YARN_CACHE_FOLDER=/tmp/.yarn-cache
            BUILDKIT_INLINE_CACHE=1
          no-cache: ${{ inputs.invalidate_caches }}

      - name: Build and push lavalink image
        id: build-lavalink
        uses: docker/build-push-action@v5
        with:
          context: ./Lavalink
          file: ./Lavalink/Dockerfile
          push: true
          tags: ${{ env.IMAGE_LAVALINK }}
          cache-from: ${{ inputs.enable_docker_cache && !inputs.invalidate_caches && format('type=gha,scope={0}', env.LAVALINK_CACHE_SCOPE) || format('type=registry,ref={0}', env.IMAGE_LAVALINK) }}
          cache-to: ${{ inputs.enable_docker_cache && !inputs.invalidate_caches && format('type=gha,scope={0},mode=max', env.LAVALINK_CACHE_SCOPE) || '' }}
          no-cache: ${{ inputs.invalidate_caches }}

      - name: Docker cache telemetry
        run: |
          echo "## Docker Cache Status" >> $GITHUB_STEP_SUMMARY
          echo "Cache mode: ${{ inputs.enable_docker_cache && 'enabled' || 'disabled' }}" >> $GITHUB_STEP_SUMMARY
          echo "Cache scope mode: ${{ inputs.cache_scope_mode }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ inputs.cache_scope_mode }}" == "environment" ]; then
            echo "Deploy environment: ${{ inputs.deploy_environment || 'default' }}" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ steps.build-bot.outputs.cache-hit }}" == "true" ]; then
            echo "✅ Bot Docker cache hit (scope: ${{ env.BOT_CACHE_SCOPE }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Bot Docker cache miss" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ steps.build-lavalink.outputs.cache-hit }}" == "true" ]; then
            echo "✅ Lavalink Docker cache hit (scope: ${{ env.LAVALINK_CACHE_SCOPE }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Lavalink Docker cache miss" >> $GITHUB_STEP_SUMMARY
          fi

  deploy:
    needs: build-and-push
    if: always() && (needs.build-and-push.result == 'success' || needs.build-and-push.result == 'skipped')
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      IMAGE_BOT: ghcr.io/${{ github.repository_owner }}/dimbybot2/bot:sha-${{ github.sha }}
      IMAGE_LAVALINK: ghcr.io/${{ github.repository_owner }}/dimbybot2/lavalink:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate .env file
        run: |
          cat << EOF > .env
          BOT_TOKEN=${{ secrets.BOT_TOKEN }}
          CLIENT_ID=${{ secrets.CLIENT_ID }}
          GUILD_ID=${{ secrets.GUILD_ID }}
          OWNER_ID=${{ secrets.OWNER_ID }}
          DEV_MODE=${{ secrets.DEV_MODE }}
          LOG_LEVEL=${{ secrets.LOG_LEVEL }}
          LAVALINK_HOST=${{ secrets.LAVALINK_HOST }}
          LAVALINK_PORT=${{ secrets.LAVALINK_PORT }}
          LAVALINK_PASSWORD=${{ secrets.LAVALINK_PASSWORD }}
          LAVALINK_NODE_ID=${{ secrets.LAVALINK_NODE_ID }}
          LAVALINK_SECURE=${{ secrets.LAVALINK_SECURE }}
          LAVALINK_YOUTUBE_POT_TOKEN=${{ secrets.LAVALINK_YOUTUBE_POT_TOKEN }}
          LAVALINK_YOUTUBE_POT_VISITORDATA=${{ secrets.LAVALINK_YOUTUBE_POT_VISITORDATA }}
          LAVALINK_SPOTIFY_ENABLED=${{ secrets.LAVALINK_SPOTIFY_ENABLED }}
          LAVALINK_SPOTIFY_CLIENT_ID=${{ secrets.LAVALINK_SPOTIFY_CLIENT_ID }}
          LAVALINK_SPOTIFY_CLIENT_SECRET=${{ secrets.LAVALINK_SPOTIFY_CLIENT_SECRET }}
          LAVALINK_SPOTIFY_COUNTRY_CODE=${{ secrets.LAVALINK_SPOTIFY_COUNTRY_CODE }}
          LAVALINK_SPOTIFY_PLAYLIST_LOAD_LIMIT=${{ secrets.LAVALINK_SPOTIFY_PLAYLIST_LOAD_LIMIT }}
          LAVALINK_SPOTIFY_ALBUM_LOAD_LIMIT=${{ secrets.LAVALINK_SPOTIFY_ALBUM_LOAD_LIMIT }}
          EMAIL_USER=${{ secrets.EMAIL_USER }}
          EMAIL_PASS=${{ secrets.EMAIL_PASS }}
          GITLAB_EMAIL=${{ secrets.GITLAB_EMAIL }}
          BOT_IMAGE=${{ env.IMAGE_BOT }}
          LAVALINK_IMAGE=${{ env.IMAGE_LAVALINK }}
          GH_ACTOR=${{ github.actor }}
          GH_TOKEN=${{ secrets.GITHUB_TOKEN }}
          EOF

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.DEPLOY_SERVER_SSH_PORT }}
          source: ".env,docker-compose.yml"
          target: "/home/bot/"

      - name: Copy deployment script to server
        run: |
          cat << 'EOS' > ci_deploy.sh
          #!/bin/bash
          set -e
          cd /home/bot
          export $(grep -v '^#' .env | xargs)
          sed -i "s|image: .*bot.*|image: $BOT_IMAGE|" docker-compose.yml
          sed -i "s|image: .*lavalink.*|image: $LAVALINK_IMAGE|" docker-compose.yml
          echo "$GH_TOKEN" | /usr/bin/docker login ghcr.io -u "$GH_ACTOR" --password-stdin
          /usr/bin/docker compose down
          /usr/bin/docker compose pull
          /usr/bin/docker compose up -d
          EOS
          
          # Create SSH key file with proper permissions
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > deploy_key
          chmod 600 deploy_key
          
          # Use the key file for SCP
          scp -i deploy_key -P ${{ secrets.DEPLOY_SERVER_SSH_PORT }} -o StrictHostKeyChecking=accept-new ci_deploy.sh ${{ secrets.DEPLOY_SERVER_USER }}@${{ secrets.DEPLOY_SERVER_HOST }}:/home/bot/ci_deploy.sh
          
          # Clean up the key file
          rm -f deploy_key

      - name: Run deployment script on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.DEPLOY_SERVER_SSH_PORT }}
          script: |
            bash /home/bot/ci_deploy.sh 