#!/bin/sh
echo "Lavalink Entrypoint: Starting..."

# ==============================================================================
# Generate application.yml from Environment Variables
# ==============================================================================
# This uses environment variables passed into the container (e.g., from docker-compose)
# to create the application.yml configuration file needed by Lavalink.

echo "Lavalink Entrypoint: Generating application.yml..."
cat > application.yml << EOF
# Generated by entrypoint.sh at container start
plugins:
  youtube:
    enabled: true
    allowSearch: true
    allowDirectVideoIds: true
    allowDirectPlaylistIds: true
    pot:
      token: ${LAVALINK_YOUTUBE_POT_TOKEN}
      visitorData: ${LAVALINK_YOUTUBE_POT_VISITORDATA}
    clients:
      - WEB
      - WEBEMBEDDED
  lavasrc:
    providers:
      - "ytsearch:\"%ISRC%\""
      - "ytsearch:%QUERY%"
    sources:
      spotify: ${LAVALINK_SPOTIFY_ENABLED}
      applemusic: false
      deezer: false
      yandexmusic: false
      flowerytts: false
      youtube: true
      vkmusic: false
      tidal: false
      qobuz: false
      ytdlp: false
    spotify:
      clientId: "${LAVALINK_SPOTIFY_CLIENT_ID}"
      clientSecret: "${LAVALINK_SPOTIFY_CLIENT_SECRET}"
      countryCode: "${LAVALINK_SPOTIFY_COUNTRY_CODE}"
      playlistLoadLimit: ${LAVALINK_SPOTIFY_PLAYLIST_LOAD_LIMIT}
      albumLoadLimit: ${LAVALINK_SPOTIFY_ALBUM_LOAD_LIMIT}
      preferAnonymousToken: false # Whether to use the anonymous token for resolving tracks, artists and albums. Spotify generated playlists are always resolved with the anonymous tokens since they do not work otherwise. This requires the customTokenEndpoint to be set.
      customTokenEndpoint: "http://spotify-tokener:8080/api/token" # Optional custom endpoint for getting the anonymous token. If not set, spotify's default endpoint will be used which might not work. The response must match spotify's anonymous token response format.
      resolveArtistsInSearch: true
      localFiles: false
server:
  port: ${LAVALINK_PORT}
lavalink:
  plugins:
    - dependency: "dev.lavalink.youtube:youtube-plugin:1.13.4"
      snapshot: false
    - dependency: "com.github.topi314.lavasrc:lavasrc-plugin:dbda8e7"
      repository: "https://maven.lavalink.dev/snapshots"
      snapshot: true
  server:
    password: ${LAVALINK_PASSWORD}
    sources:
      # The default Youtube source is now deprecated and won't receive further updates. Please use https://github.com/lavalink-devs/youtube-source#plugin instead.
      youtube: false
      bandcamp: true
      soundcloud: true
      twitch: true
      vimeo: true
      nico: true
      http: false # warning: keeping HTTP enabled without a proxy configured could expose your server's IP address.
      local: false
    filters: # All filters are enabled by default
      volume: true
      equalizer: true
      karaoke: true
      timescale: true
      tremolo: true
      vibrato: true
      distortion: true
      rotation: true
      channelMix: true
      lowPass: true
    nonAllocatingFrameBuffer: false # Setting to true reduces the number of allocations made by each player at the expense of frame rebuilding (e.g. non-instantaneous volume changes)
    bufferDurationMs: 400 # The duration of the NAS buffer. Higher values fare better against longer GC pauses. Duration <= 0 to disable JDA-NAS. Minimum of 40ms, lower values may introduce pauses.
    frameBufferDurationMs: 5000 # How many milliseconds of audio to keep buffered
    opusEncodingQuality: 10 # Opus encoder quality. Valid values range from 0 to 10, where 10 is best quality but is the most expensive on the CPU.
    resamplingQuality: LOW # Quality of resampling operations. Valid values are LOW, MEDIUM and HIGH, where HIGH uses the most CPU.
    trackStuckThresholdMs: 10000 # The threshold for how long a track can be stuck. A track is stuck if does not return any audio data.
    useSeekGhosting: true # Seek ghosting is the effect where whilst a seek is in progress, the audio buffer is read from until empty, or until seek is ready.
    youtubePlaylistLoadLimit: 6 # Number of pages at 100 each
    playerUpdateInterval: 5 # How frequently to send player updates to clients, in seconds
    youtubeSearchEnabled: true
    soundcloudSearchEnabled: true
    gc-warnings: true

EOF
echo "Lavalink Entrypoint: application.yml generated successfully."


# ==============================================================================
# Start the Lavalink Server
# ==============================================================================
# The 'exec' command replaces the current shell process with the java process.
# This ensures that java becomes the main process (PID 1) in the container,
# which is important for signal handling (like stopping the container).

echo "Lavalink Entrypoint: Executing 'java -jar Lavalink.jar'..."
exec java -jar Lavalink.jar 
